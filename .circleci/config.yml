version: 2.1

orbs:
  # The python orb contains a set of prepackaged CircleCI configuration you can use repeatedly in your configuration files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you dont have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@2.1.1

workflows:
  build-test-deploy:  
    # Inside the workflow, you define the jobs you want to run. 
    # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows 
    jobs:
      - build-and-test
      - fly-deploy-staging:
          requires:
            - build-and-test
          filters:
              branches:
                only:
                  - develop
      - fly-deploy-prod:
          requires:
            - build-and-test
          filters:
              branches:
                only:
                  - main

jobs:
  build-and-test:  # This is the name of the job, feel free to change it to better match what you're trying to do!
    # These next lines defines a Docker executors: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of the convenience images from CircleCI's Developer Hub
    # A list of available CircleCI Docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python
    # The executor is the environment in which the steps below will be executed - below will use a python 3.9 container
    # Change the version below to your required version of python
    docker:
      - image: cimg/python:3.11.2
        auth:
          username: mydockerhub-user
          password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
        environment: # environment variables for primary container
          PIPENV_VENV_IN_PROJECT: true
    
    steps:
      - checkout
      - run:
          name: Poetry uninstall 1.1.6
          command: POETRY_UNINSTALL=1 bash -c 'curl -sSL https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py | python'      
      - run:
          name: Install new poetry 1.2
          command: curl -sSL https://install.python-poetry.org | python3 -
      - run:
          name: Poetry version post
          command: poetry --version        
      - run:
          name: Poetry Install
          command: poetry install 
      - run:
          name: Safety Check
          command: poetry run safety check 
      - run:
          name: Run tests
          command: |
            mkdir test-results
            poetry run pytest --junitxml=test-results/junit.xml
      - store_artifacts:
          path: test-results/
          destination: tr1
      - store_test_results:
          path: test-results/

  fly-deploy-staging:
    machine:
      image: ubuntu-2004:202201-01
      docker_layer_caching: true
    steps:
      - checkout
      - run:
          name: Deploy Setup
          command: |
            wget -qO- 'https://getfly.fly.dev/linux-x86-64/flyctl.tgz' | tar xz
            ./flyctl auth docker -t $FLY_API_ACCESS_TOKEN
      - run:
          name: Deploy to Fly
          command: |
            ./flyctl auth login --email $FLY_USER_NAME --password $FLY_PASSWORD --otp nothing
            docker build -t registry.fly.io/$FLY_APP_NAME:$CIRCLE_BUILD_NUM .
            docker push registry.fly.io/$FLY_APP_NAME:$CIRCLE_BUILD_NUM
            ./flyctl deploy -i registry.fly.io/$FLY_APP_NAME:$CIRCLE_BUILD_NUM -a $FLY_APP_NAME

  fly-deploy-prod:
    machine:
      image: ubuntu-2004:202201-01
      docker_layer_caching: true
    steps:
      - checkout
      - run:
          name: Deploy Setup
          command: |
            wget -qO- 'https://getfly.fly.dev/linux-x86-64/flyctl.tgz' | tar xz
            ./flyctl auth docker -t $FLY_API_ACCESS_TOKEN
      - run:
          name: Deploy to Fly Production
          command: |
            ./flyctl auth login --email $FLY_USER_NAME --password $FLY_PASSWORD --otp nothing
            docker build -t registry.fly.io/$FLY_APP_NAME_PROD:$CIRCLE_BUILD_NUM .
            docker push registry.fly.io/$FLY_APP_NAME_PROD:$CIRCLE_BUILD_NUM
            ./flyctl deploy -i registry.fly.io/$FLY_APP_NAME_PROD:$CIRCLE_BUILD_NUM -a $FLY_APP_NAME_PROD
